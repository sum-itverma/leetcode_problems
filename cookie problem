#1. State the problem clearly, Identify the input and output formats.
''' Each child i has a greed factor g[i]
    each cookie j has a size s[j]
    find number of your content children and output the maximum number
    If s[j] >= g[i], we can assign the cookie j to the child i'''

#2. come up with some example inputs and outputs. Try to cover all edge cases.
''' input:  g = [1,2,9], s = [1,2,10]
    output: 1
'''
#3. Come up with correct solution for the problem. State it in plain English.
''' iterate size list using for loop
    iterate greed list using for loop
        check if size>=greed
            pick child and pop greed factor from greed list
            break
'''

'''
4. Implement the solution and test it using example inputs. Fix bug if any.
5. Analyze the algorithm complexity and identify the inefficiency.
6. Analyze the right technique to overcome inefficiencies. Repeat step-3 to step-6.
'''

def findContentChildren(g, s):
    child = 0
    indx = None
    s.sort()
    for size in s:
        flag = False
        if g:
            for i in range(len(g)):
                if size >= g[i]:
                    child += 1
                    if child == 955:
                        print(True)
                    indx = i
                    flag = True
                    break
            if flag: g.pop(indx)

    return child

s= [520, 521, 521, 523, 524, 524, 524, 525, 525, 525, 526, 526, 526, 526]
g= [526, 526, 517, 525, 525, 522]

# s = [1,1,2,3]
# g = [99,526, 526, 517, 525, 525, 522,1,1,3,2]
print(findContentChildren(g,s))
